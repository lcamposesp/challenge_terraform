name: 'Terraform Dev Test'

on:
  push:
    branches: ["dev-test"]
  pull_request:
    branches: ["dev-test"]
    
permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Initialize GO
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v3
      with:
        go-version: '^1.13.1' # The Go version to download (if necessary) and use.
    - run: go version

    # Correr Go Test
    - name: Terratest Run
    - run: go test
    - working-directory: test/

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        
    # Testing terraform format   
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
    
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

 
